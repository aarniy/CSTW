Task 1

1.1

PS C:\Users\user\crypto> python week3.py
¸ÔïØæÍÆßÆÛßÙåÕÜÙáØâÆÕÖÚÚæåÔÐÛÆìäáØÔÖÍÑÞ
¸ÔïØæÍÆÎÍÚÜæåÕÜÙáØÚÔÖàÐÚæåÔÐÛÆìäáØÔÖÍÑÞ

The ciphered texts are very similar and when using the same keystream,
the result will look similar.

1.2

PS C:\Users\user\crypto> python week3.py
£¯ª¬ª ÍÞÙ×ªÊ£Æª×ÕªÏ ÊÚÖ¦¿Ô×ÒÙáØæÆÃÙÐØçãÙÉÒÕÚçÝáÂàØèââÆÔÛÔìæÝÔÑÆ
¤¬Õª©¢«¬×¥Î¤±©­ÕÏÈ«×¬¿Ô×ÒÙáØÕÍÂÖÝØçãÙÉÒÍèèç×ÂàØèââÆÔÛÔìæÝÔÑÆ

When adding nonce the result will look different form the start but then again
after the nonce very similar.
1.3

$ dd if=/dev/urandom of=./data.bin bs=100M count=10                              
10+0 records in
10+0 records out
1048576000 bytes (1.0 GB, 1000 MiB) copied, 5.50766 s, 190 MB/s
                                                                                                           
┌──(kali㉿kali)-[~/Documents/week3]
└─$ time openssl enc -aes-256-cbc -salt -in data.bin -out data.enc -pass pass:example
*** WARNING : deprecated key derivation used.
Using -iter or -pbkdf2 would be better.

real    6.54s
user    2.61s
sys     3.92s
cpu     99%
                                                                                                           
┌──(kali㉿kali)-[~/Documents/week3]
└─$ time openssl enc -aes-256-ctr -salt -in data.bin -out data.enc -pass pass:example
*** WARNING : deprecated key derivation used.
Using -iter or -pbkdf2 would be better.

real    3.84s
user    1.75s
sys     2.08s
cpu     99%
                                                                                                           
┌──(kali㉿kali)-[~/Documents/week3]
└─$ time openssl enc -chacha20 -salt -in data.bin -out data.enc -pass pass:example   
*** WARNING : deprecated key derivation used.
Using -iter or -pbkdf2 would be better.

real    4.14s
user    1.93s
sys     2.20s
cpu     99%

When running on VM and with big enough data sample AES-CTR seems to be the fastest.
With smaller samples the difference was insignificant in the range of 0.01 seconds
between each other. I have AES-NI support on my HW.
